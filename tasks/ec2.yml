---
- name: create ec2 ssh key
  ec2_key:
       name: ec2-{{Stage}}-key
       region: "{{region}}"
       key_material: "{{ lookup('file', '../files/id_rsa.pub') }}"

- ec2_group:
      name: ec2-sg-{{Stage}}
      description: sg with rule for rds descriptions
      vpc_id: "{{VpcId}}"
      region: "{{region}}"
      rules:
        - proto: all
          group_name: rds-sg-{{Stage}}
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
  register: ec2_sg

- name: create defined number ec2 for docker cluster
  ec2:
         region: "{{region}}"
         key_name: ec2-{{Stage}}-key
         group_id: "{{ec2_sg.group_id}}"
         instance_type: "{{mongodb.instance_type}}"
         image: "{{ami}}"
         wait: yes
         wait_timeout: 500
         exact_count: 1
         count_tag:
            Name: docker
            Stage: "{{Stage}}"
            Loop: "{{item}}"
         instance_tags:
            Name: docker
            Stage: "{{Stage}}"
            Loop: "{{item}}"
         monitoring: no
         volumes:
           - device_name: /dev/xvda
             volume_type: gp2
             volume_size: 12
         vpc_subnet_id: "{{subnet[exact_count-item]}}"
         assign_public_ip: yes
   register: lcec2_ec2
   loop: "{{ range(1, exact_count+1)|list }}"

- name: find out ec2 instance metadata
  ec2_instance_facts:
          region: "{{region}}"
          filters:
             "tag:Name": docker
             "tag:Stage": "{{Stage}}"
             instance-state-name: running
  register: result_ec2

- name: Wait for ec2 SSH to come up
  wait_for: host={{ item.public_ip_address }} port=22 delay=5 timeout=320 state=started
  with_items: '{{result_ec2.instances}}'
  loop_control:
       label: "{{ item.public_ip_address }}"
  when: lcec2_ec2.changed == true

- name: add ec2 host to docker groups and set varibles
  add_host:
          hostname: "{{ item.public_ip_address }}"
          groups:
            - docker
          private_ip: "{{ item.private_ip_address }}"
          ansible_ssh_private_key_file: "../files/ec2-ssh.pem"
          ansible_user: ec2-user
          ansible_become: yes
          ansible_become_method: sudo
  with_items: "{{result_ec2.instances}}" 
  loop_control:
        label: "{{ item.public_ip_address }}"
