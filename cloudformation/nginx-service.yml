AWSTemplateFormatVersion: 2010-09-09
Description: >
  AWS CloudFormation template to use an existing ECS Cluster for service deployment
Parameters:
  CPort:
    Type: Number
    Default: 80
  CName:
    Type: String
  EcrURI:
    Type: String
  BuildVersion:
    Type: String
  StageName:
    Type: String
    Default: PROD
    AllowedValues:
      - UAT
      - PROD
      - QA
  DesiredCount:
    Type: Number
    Default: 1
  LaunchType:
    Type: String
    Default: EC2
  VpcId: 
     Type: String
     Default: 'vpc-5d1da939'
  VpcSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: "subnet-5502f931,subnet-7cc7bd0b"
  ServiceName:
    Type: String
  LBScheme:
    Type: String
    Default: internet-facing
    AllowedValues:
         - internal
         - internet-facing
  Priority:
     Type: Number

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Tags:
        -
          Key: Stage
          Value: !Ref StageName
      Name: !Sub ${ServiceName}-${StageName}-${LBScheme}-targets
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: instance
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
          
  ListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
        Conditions:
        - 
          Field: path-pattern
          Values: 
            - !Sub "/${ServiceName}/*" 
        ListenerArn: 
           Fn::ImportValue:
             !Sub LoadBalancerListener-${LBScheme}-${StageName}
        Priority: !Ref Priority
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}'
      RetentionInDays: 7
      
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Sub ${ServiceName}-${LBScheme}
      Cluster:  
         Fn::ImportValue: 
             !Sub "EcsClusterName-${StageName}"
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: EC2
      HealthCheckGracePeriodSeconds: 60
      DeploymentConfiguration:
          MaximumPercent: 150
          MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: !Ref CName
          ContainerPort: !Ref CPort
          TargetGroupArn: !Ref TargetGroup
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref ServiceName
      RequiresCompatibilities: 
             - EC2
      NetworkMode: bridge
      ContainerDefinitions:
        - Name: !Ref CName
          Image: !Sub ${EcrURI}/${CName}:v_${BuildVersion}
          Essential: true
          Cpu: 512
          Memory: 512
          PortMappings:
            - ContainerPort: !Ref CPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref 'AWS::StackName'
  ScalableTarget:
    DependsOn: ECSService
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub
            - service/${ClusterName}/${ServiceName}-${LBScheme}
            -
             ClusterName:
               Fn::ImportValue:
                 !Sub "EcsClusterName-${StageName}"
      RoleARN: 
         Fn::ImportValue:
             !Sub ApplicationAutoScalingRole-${StageName}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ScalingPolicyByCPU:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: AutoScalingByCPUUsage
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 60
        ScaleInCooldown: 60
        ScaleOutCooldown: 200
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ScalingPolicyByMemory:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: AutoScalingByMemoryUsage
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 200
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization


  ScalableTarget:
    DependsOn: ECSService
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub
            - service/${ClusterName}/${ServiceName}-${LBScheme}
            -
             ClusterName:
               Fn::ImportValue:
                 !Sub "EcsClusterName-${StageName}"
      RoleARN: 
         Fn::ImportValue:
             !Sub ApplicationAutoScalingRole-${StageName}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs


Outputs:
  Service:
    Value: !Ref ECSService
